package main

import (
	"context"
	"fmt"
	"io/ioutil"
	"log"

	"github.com/chromedp/chromedp"
)

func main() {
	// create context
	ctx, cancel := chromedp.NewContext(
		context.Background(),
		// chromedp.WithDebugf(log.Printf),
	)
	defer cancel()

	// capture screenshot of an element
	var buf []byte
	// if err := chromedp.Run(ctx, elementScreenshot(`https://pkg.go.dev/`, `img.Homepage-logo`, &buf)); err != nil {
	// 	log.Fatal(err)
	// }
	// if err := ioutil.WriteFile("elementScreenshot.png", buf, 0o644); err != nil {
	// 	log.Fatal(err)
	// }

	// capture entire browser viewport, returning png with quality=90
	var list = []string{"4700",
		"2030",
		"2222",
		"2380",
		"4030",
		"4200",
		"1201",
		"1202",
		"1210",
		"1211",
		"1301",
		"1304",
		"1320",
		"1321",
		"2001",
		"2002",
		"2010",
		"2020",
		"2060",
		"2090",
		"2150",
		"2170",
		"2180",
		"2200",
		"2210",
		"2220",
		"2240",
		"2250",
		"2290",
		"2300",
		"2310",
		"2330",
		"2350",
		"3001",
		"3002",
		"3003",
		"3004",
		"3005",
		"3007",
		"3008",
		"3010",
		"3020",
		"3030",
		"3040",
		"3050",
		"3060",
		"3080",
		"3090",
		"3091",
		"1212",
		"1302",
		"1303",
		"2040",
		"2110",
		"2160",
		"2320",
		"2360",
		"2370",
		"4140",
		"4141",
		"1831",
		"1832",
		"4270",
		"6004",
		"2190",
		"4031",
		"4040",
		"4110",
		"4260",
		"4261",
		"1213",
		"2130",
		"2340",
		"4011",
		"4012",
		"4180",
		"1810",
		"1820",
		"1830",
		"4010",
		"4170",
		"4290",
		"4291",
		"4292",
		"6002",
		"6012",
		"6013",
		"4070",
		"4071",
		"4210",
		"1214",
		"4003",
		"4008",
		"4050",
		"4051",
		"4190",
		"4191",
		"4240",
		"4001",
		"4006",
		"4061",
		"4160",
		"4161",
		"4162",
		"2050",
		"2100",
		"2270",
		"2280",
		"2281",
		"6001",
		"6010",
		"6020",
		"6040",
		"6050",
		"6060",
		"6070",
		"6090",
		"2140",
		"2230",
		"4002",
		"4004",
		"4005",
		"4007",
		"4009",
		"4013",
		"4014",
		"2070",
		"1010",
		"1020",
		"1030",
		"1050",
		"1060",
		"1080",
		"1120",
		"1140",
		"1150",
		"1180",
		"1182",
		"1111",
		"2120",
		"4080",
		"4081",
		"4130",
		"4280",
		"8010",
		"8012",
		"8020",
		"8030",
		"8040",
		"8050",
		"8060",
		"8070",
		"8080",
		"8100",
		"8110",
		"8120",
		"8150",
		"8160",
		"8170",
		"8180",
		"8190",
		"8200",
		"8210",
		"8230",
		"8240",
		"8250",
		"8260",
		"8270",
		"8280",
		"8300",
		"8310",
		"8311",
		"8312",
		"7200",
		"7201",
		"7202",
		"7203",
		"7010",
		"7020",
		"7030",
		"7040",
		"2080",
		"2081",
		"2082",
		"5110",
		"4330",
		"4331",
		"4332",
		"4333",
		"4334",
		"4335",
		"4336",
		"4337",
		"4338",
		"4339",
		"4340",
		"4342",
		"4344",
		"4345",
		"4346",
		"4347",
		"4348",
		"4020",
		"4090",
		"4100",
		"4150",
		"4220",
		"4230",
		"4250",
		"4300",
		"4310",
		"4320",
		"4321",
		"9512",
		"9513",
		"9514",
		"9517",
		"9523",
		"9510",
		"9525",
		"9528",
		"9529",
		"9531",
		"9533",
		"9520",
		"9522",
		"9526",
		"9515",
		"9532",
		"9518",
		"9527",
		"9530",
		"9534",
		"9524",
		"9516",
		"9511",
		"9519",
		"9521"}
	for _, v := range list {
		comp := fmt.Sprintf(`https://www.saudiexchange.sa/wps/portal/tadawul/market-participants/issuers/issuers-directory/company-details/!ut/p/z1/04_Sj9CPykssy0xPLMnMz0vMAfIjo8zi_Tx8nD0MLIy83V1DjA0czVx8nYP8PI0MDAz0I4EKzBEKDEJDLYEKjJ0DA11MjQzcTfXDCSkoyE7zBAC-SKhH/?companySymbol=%s&locale=ar`, v)
		if err := chromedp.Run(ctx, fullScreenshot(comp, 90, &buf)); err != nil {

			log.Fatal(err)
		}
		if err := ioutil.WriteFile("fullScreenshot_"+v+".png", buf, 0o644); err != nil {
			log.Fatal(err)
		}

		log.Printf("fullScreenshot_" + v + ".png")

	}
}

// elementScreenshot takes a screenshot of a specific element.
func elementScreenshot(urlstr, sel string, res *[]byte) chromedp.Tasks {
	return chromedp.Tasks{
		chromedp.Navigate(urlstr),
		chromedp.Screenshot(sel, res, chromedp.NodeVisible),
	}
}

// fullScreenshot takes a screenshot of the entire browser viewport.
//
// Note: chromedp.FullScreenshot overrides the device's emulation settings. Use
// device.Reset to reset the emulation and viewport settings.
func fullScreenshot(urlstr string, quality int, res *[]byte) chromedp.Tasks {
	return chromedp.Tasks{
		chromedp.Navigate(urlstr),
		chromedp.FullScreenshot(res, quality),
	}
}
